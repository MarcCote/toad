"""A preset format, used as a starting point for developing a toad task

        Simply copy and rename this file:  cp xx-template yourtaskname.py into any folder.
            yourtaskname is any name at your convenience. you should keep the name must be lowercase
        Change the class name Template for Yourtaskname. Note the first letter of the name should be capitalized

        A directory called Yourtaskname will be create into the subject dir. A local variable self.workingDir will
        be initialize to that directory


        Do not forget to specify the location and the file name (-t switch) when you launch toad***
                #toad  -t <this file name and location>


        Args:
            subject: a Subject instance inherit by the subjectmanager.

"""
from core.generictask import GenericTask
__author__ = "Your_name"
__copyright__ = "Copyright (C) 2014, TOAD"
__credits__ = ["Your_name", "Mathieu Desrosiers"]


class Template(GenericTask):


    def __init__(self, subject):
        """initialisation methods. Please leave as is"""

        GenericTask.__init__(self, subject)
        """Inherit from a generic Task.

        Args:
            subject: Subject instance inherit by the subjectmanager.

            Note that you may supply additional arguments to generic tasks.
            Exemple: if you provide GenericTask.__init__(self, subject, foo, bar ...)
            toad will create an variable fooDir and barDir
            that will point to the first additionnal argurments fooDir.

        """


    def implement(self):
        """Placeholder for the business logic implementation

        """
        pass


    def meetRequirement(self):
        """Validate if all requirements have been met prior to launch the task

        Returns:
            True if all requirement are meet, False otherwise
        """
        return True


    def isDirty(self):
        """Validate if this tasks need to be submit during the execution

        Returns:
            True if any expected file or resource is missing, False otherwise
        """
        return True
