from core.generictask import GenericTask
from lib.images import Images
from lib import mriutil, util
import os
import nibabel
import numpy
import scipy.ndimage.morphology
__author__ = 'cbedetti'


class Snr(GenericTask):


    def __init__(self, subject):
        GenericTask.__init__(self, subject, 'preparation', 'correction', 'denoising', 'upsampling', 'registration', 'masking', 'qa')


    def implement(self):

        #Check if native dwi have an even number in z direction
        dwiNative = self.getPreparationImage('dwi')
        target = self.buildName(dwiNative, 'subset')
        if dwiNative:
            try:
                zDims = int(mriutil.getMriDimensions(image)[2])
                if zDims%2 == 1:
                    mriutil.extractSubVolume(dwiNative, target, '+2',"0:{}".format(zDims-2), self.getNTreadsMrtrix())
                else:
                    util.symLink(dwiNative, target)
            except ValueError:
                util.symLink(dwiNative, target)

        #Noise mask computation
        brainMaskResample = self.getRegistrationImage('mask', 'resample')
        self.__computeNoiseMask(brainMaskResample)


    def __computeNoiseMask(self, brain):
        target = self.buildName(brain, 'noisemask')
        brainImage = nibabel.load(brain)
        brainData = brainImage.get_data()
        brainData[brainData>0] = 1
        maskNoise = scipy.ndimage.morphology.binary_dilation(brainData, iterations=25)
        maskNoise[..., :maskNoise.shape[-1]//2] = 1
        maskNoise = ~maskNoise
        nibabel.save(nibabel.Nifti1Image(maskNoise.astype(numpy.uint8), brainImage.get_affine()), target)
        return target


    def __noiseAnalysis(self, dwi, noiseMask, ccMask, qaImages, description):
        """

        """
        snrPng = self.buildName(dwi, 'snr', 'png')
        histPng = self.buildName(dwi, 'hist', 'png')
        self.noiseAnalysis(dwi, noiseMask, ccMask, snrPng, histPng)
        qaImages.append(
            (snrPng, '{} DWI image : SNR for each volume'.format(description)),
            (histPng, '{} DWI image : noise histogram'.format(description)),
            )
        return qaImages


    def meetRequirement(self):
        return Images(
            (self.getPreparationImage('dwi'), 'diffusion weighted'),
            (self.getRegistrationImage('mask', 'resample'), 'brain mask'),
            (self.getMaskingImage('aparc_aseg', ['253','mask']), 'Corpus Callusum mask from masking task'),
            (self.getUpsamplingImage('b0', 'upsample'), 'B0 upsampled')
            )


    def isDirty(self):
        return Images(
            (self.getImage('dwi', 'subset'), 'Native dwi'),
            (self.getImage('dwi', 'noisemask'), 'Noise mask'),
            )


    def qaSupplier(self):
        """Create and supply images for the report generated by qa task

        """
        qaImages = Images()

        #Get images
        dwiNative = self.getImage('dwi', 'subset')
        dwiCorrected = self.getCorrectionImage('dwi', 'corrected')
        dwiDenoised = self.getDenoisingImage('dwi', 'denoise')
        dwiNoiseMask = self.getImage('dwi', 'noisemask')
        dwiCcMask = self.getMaskingImage('aparc_aseg', ['253','mask'])
        b0 = self.getUpsamplingImage('b0', 'upsample')

        #Build qa images
        tags = (
            (dwiNative, 'Native'),
            (dwiCorrected, 'Corrected'),
            (dwiDenoised, 'denoised'),
            )
        for dwi, description in tags:
            if dwi:
                qaImages = self.__noiseAnalysis(dwi, dwiNoiseMask, dwiCcMask, qaImages, description)

        noiseMaskPng = self.buildName(dwiNoiseMask, None, 'png')
        self.slicerPng(b0, noiseMaskPng, maskOverlay=dwiNoiseMask, boundaries=dwiNoiseMask)
        qaImages.append((noiseMaskPng, 'Noise mask to compute SNR'))

        return qaImages
