#!/usr/bin/env python
# -*- coding: utf-8 -*-
import ConfigParser
import tempfile
import argparse
import tarfile
import shutil
import glob
import sys
import os
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), '..'))
from lib import util

__author__ = "Guillaume Vallet, Mathieu Desrosiers"
__copyright__ = "Copyright 2015, The Toad Project"
__credits__ = ["Guillaume Vallet", "Mathieu Desrosiers"]
__license__ = "GPL"
__version__ = "0.0"
__maintainer__ = "Mathieu Desrosiers"
__email__ = "mathieu.desrosiers@criugm.qc.ca"
__status__ = "Development"


class Session(object):

    def __init__(self):
        self.name = None
        self.sequence = None
        self.path = None

    def __repr__(self):
        return "name = {}, sequence = {}, path = {}".format(self.name, self.sequence, self.path)

    def __eq__(self, other):
        return (isinstance(other, type(self))
                and (self.name, self.sequence,  self.path) == (other.name, other.sequence, self.path))

class Unftoad(object):

    def __init__(self):

        self.__arguments = None
        self.__prefixs = []
        self.__rootDirectories = []
        self.__sessions = []
        self.__prefixNames = (('anat', "Anatomical (T1--MPRAGE)"),
                                    ('dwi', "Diffusion weighted image (DWI - DTI)"),
                                    ('b0_ap', "B0 AP (anterior -> posterior)"),
                                    ('b0_pa', "B0 PA (posterior -> anterior)"))

    def run(self):
        #@TODO none unf options, reshuffle dicom
        #@TODO a user may choose is strides values
        self.__arguments = self.__parseArguments()

        self.__extractRootsDirectory(self.__arguments.sources)
        self.__extractSessions()


        #ask user to choose a sessions if many exist
        allSessionNames = self.__getSessionsName()

        while True:

            if len(allSessionNames) > 1:
                sessionName = self.__chooseValue(allSessionNames, "Please choose a session to convert")
                if sessionName is None:
                    break
                sessions = self.__filterSession(sessionName)

            else:
                sessionName = allSessionNames[0]
                sessions = self.__sessions

            subjectName = sessionName
            answer = raw_input("Please enter a subject name? Defaults {} :".format(subjectName))
            if answer.strip(" ") != "":
                subjectName = answer

            map = {}
            for (index, value) in self.__prefixNames:
                map[index] = self.__chooseValue(sessions, value)

            if self.__isAllValuesNone(map):
                print "No image to convert"

            else:
                self.__prefixs = self.__parsePrefixFromConfig(self.__prefixNames)
                isPrefixHaveBeenChange = self.__isUserWantCustomPrefixs(self.__prefixNames)

                if self.__arguments.dirName:
                    targetDir = os.path.join(os.getcwd(), self.__arguments.dirName, subjectName)
                else:
                    targetDir = os.path.join(os.getcwd(), "toad_data", subjectName)

                if not os.path.exists(targetDir):
                    os.makedirs(targetDir)

                self.__convert(targetDir, map, sessionName, subjectName, isPrefixHaveBeenChange)

            if len(allSessionNames) == 1:
                break
            else:
                if not util.displayYesNoMessage("\n\nWould you like to convert another session"):
                    break

        #cleanup temporary directory
        for (directory, archive) in self.__rootDirectories:
            if archive is not None:
                shutil.rmtree(directory)


    def __filterSession(self, sessionName):
        sessions = []
        for session in self.__sessions:
            if session.name == sessionName:
                sessions.append(session)
        return sessions


    def __getSessionsName(self):
        names = []
        for session in self.__sessions:
            if session.name not in names:
                names.append(session.name)
        return names


    def __getSession(self, name, sequence):
        for session in self.__sessions:
            if session.name == name and session.sequence == sequence:
                return session
        return None


    def __parseArguments(self):
        """Prepare and parse user friendly command line arguments for sys.argv.


        Returns:
            a args stucture containing command lines arguments
        """
        parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                         description ="""\n

             """)
        parser.add_argument("sources", nargs='+', help="A list or a single UNF mri session")
        parser.add_argument("-c", "--config", nargs='?',metavar=('filename'), required=False,
                                help="Specify the location of an alternative the config.cfg as input. Default: etc/config.cfg")
        parser.add_argument("-n","--noConfig", help="Do not produce the config.cfg file into the root folder", action="store_true")
        parser.add_argument("-s","--noStride", help="Keep original stride orientation.", action="store_true")
        parser.add_argument("-d", "--dirName", nargs='?',metavar=('dirname'), required=False,
                            help="Specify the name of the destination directory. Default: toad_data")

        args = parser.parse_args()
        return args


    def __isUserWantCustomPrefixs(self, prefixNames):
        message = "Whould you like to change default prefix at the beginning of the filename? Actual are ...\n"

        for index, value in self.__prefixs:
            if value is not None:
                for (aIndex, aValue) in prefixNames:
                    if aIndex == index:
                        message+= "\t{} will be prefix: {} \n".format(aValue, value)
        answer = util.displayYesNoMessage(message, question = "Change prefix? (y or n)")

        if answer:
            prefixs = []
            for index, value in self.__prefixs:
                if value is not None:
                    for (aIndex, aValue) in prefixNames:
                        if aIndex == index:
                            message = "Enter new prefix for {} image: Default is: {} \n".format(aValue, value)
                            input = raw_input(message)
                            if input.strip(" ") != "":
                                prefixs.append((index, "{}_".format(input)))
            self.__prefixs = prefixs
            return True

        return False


    def __isAllValuesNone(self, dictionnary):
        for index, value in dictionnary.iteritems():
            if value is not None:
                return False
        return True


    def __parsePrefixFromConfig(self, listOfPrefixs):
        prefixs = []
        config = ConfigParser.ConfigParser()
        configFiles = []
        configFiles.append(os.path.dirname(os.path.realpath(__file__)).replace("bin", "etc/config.cfg"))
        if self.__arguments.config:
            if os.path.isfile(self.__arguments.config):
                configFiles.append(self.__arguments.config)

        for configFile in configFiles:
            config.read(configFile)
        for (prefix, value) in listOfPrefixs:
            prefixs.append((prefix,  config.get('prefix', prefix)))
        return prefixs


    def __exists(self, session):
        for aSession in self.__sessions:
            if aSession == session:
                return True
        return False


    def __extractRootsDirectory(self, sources):
        """

        Returns
            A list of tuples. Each tuple have 2 elements
                first element: is the session directory
                second element: the archive name if the package came from tar, None otherwise
        """
        for source in sources:
            realSource = os.path.realpath(source)
            if os.path.isdir(realSource):
                self.__rootDirectories.append((realSource, None))
            else:
                try:
                    print "Unarchiving {} file, This may take a while...".format(os.path.basename(realSource))
                    tmpDirectory = tempfile.mkdtemp()
                    tar = tarfile.open(realSource, 'r')
                    tar.extractall(tmpDirectory)
                    tar.close()
                    tmpSessions = glob.glob("{}/*".format(tmpDirectory))
                    for tmpSession in tmpSessions:
                        if os.path.isdir(tmpSession):
                            self.__rootDirectories.append((tmpSession, os.path.basename(realSource)))
                except tarfile.TarError:
                    print "Could not determine entry file type"
                    sys.exit()


    def __extractSessions(self):
        numberOfDicoms = 0
        for rootDirectory, origin in self.__rootDirectories:
            dicoms = glob.glob("{}/*/*.dcm".format(rootDirectory))
            numberOfDicoms += len(dicoms)
            dicoms.extend(glob.glob("{}/*/*/*.dcm".format(rootDirectory)))
            for dicom in dicoms:
                session = Session()
                session.name = os.path.basename(rootDirectory)
                session.path = os.path.split(dicom)[0]
                path = session.path.replace(rootDirectory, '')
                if path[0] == "/":
                    path = path[1:]
                session.sequence = path.split("/")[0]
                if not self.__exists(session):
                    self.__sessions.append(session)
        if numberOfDicoms == 0:
            print "\nNo dicom image found\n"
            sys.exit()


    def __chooseValue(self, aList, question):
        structure = []
        for index, value in enumerate(aList):
            if isinstance(value, Session):
                structure.append((index+1, value.sequence))
            else:
                structure.append((index+1, value))

        while True:
            print("\n\n"+45*"-")
            print("Please select the folder in which to find the " + question + " files:\n")
            print(" 0.  None")
            for index, value in structure:
                print("{:2d}.  {}".format(index, value))
            choice = raw_input("Enter your choice [0-"+str(len(structure))+"]: Default None [0] :")
            if choice.strip(" ") == "":
                choice = 0
            if int(choice) == 0 or 0 <= int(choice)-1 <= len(structure)-1:
               break
            else:
                print("Invalid choice, please enter a valid number")
        try:
            for index, value in structure:
                if index == int(choice):
                    return value
        except IndexError:
            return value


    def __createConfigFiles(self, configFile, dicomImage, isPrefixHaveBeenChange):

        cmd = "toadinfo {} -c {}".format(dicomImage, configFile)
        util.launchCommand(cmd)
        if isPrefixHaveBeenChange:
            config = ConfigParser.ConfigParser()
            config.read(configFile)
            config.add_section('prefix')
            for (item, value) in self.__prefixs:
                config.set('prefix', item, value)
            with open(configFile,'wb') as f:
                config.write(f)


    def __getPrefixValue(self, prefix):
        for (index, value) in self.__prefixs:
            if prefix == index:
                return value
        return None


    def __convert(self, targetDir, map, sessionName, subjectName, isPrefixHaveBeenChange):

            for prefix, directory in map.iteritems():
                path = self.__getSession(sessionName, map[prefix]).path
                filename = "{}/{}{}".format(targetDir, self.__getPrefixValue(prefix), subjectName)
                if prefix == "dwi":
                    cmd = "mrconvert {0} {1}.nii.gz -export_grad_fsl {1}.bvecs {1}.bvals"\
                        .format(path, filename)
                    if not self.__arguments.noStride:
                        cmd += " -stride 1,2,3,4 "
                    print cmd
                    util.launchCommand(cmd)

                    if not self.__arguments.noConfig:
                        dicoms = glob.glob("{}/*.dcm".format(path))
                        if len(dicoms) > 0:
                            self.__createConfigFiles("{}/config.cfg".format(targetDir), dicoms.pop(), isPrefixHaveBeenChange)
                else:
                    cmd = "mrconvert {0} {1}.nii.gz".format(path, filename)
                    if not self.__arguments.noStride:
                        cmd += " -stride 1,2,3 "
                    print cmd
                    util.launchCommand(cmd)


if __name__ == '__main__':
    toad = Unftoad()
    toad.run()


