#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys
import glob
import shutil
import tarfile
import argparse
import tempfile
import ConfigParser
from xml.dom import minidom
from collections import OrderedDict
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), '..'))
from lib import util, arguments


__author__ = "Guillaume Vallet, Mathieu Desrosiers"
__copyright__ = "Copyright (C) 2014, TOAD"
__credits__ = ["Guillaume Vallet", "Mathieu Desrosiers"]
__license__ = "GNU v2"
__version__ = "1.3.1"
__maintainer__ = "Mathieu Desrosiers"
__email__ = "mathieu.desrosiers@criugm.qc.ca"
__status__ = "Development"


class Session(object):

    def __init__(self):
        self.name = None
        self.comparator = None
        self.isConvert = None

    def __init__(self, name, comparator, isConvert):
        self.name = name
        self.comparator = comparator
        self.isConvert = isConvert

    def __repr__(self):
        return "name = {}, isConvert = {}".format(self.name, self.isConvert)

    def __eq__(self, other):
        return (isinstance(other, type(self))
                and self.name == other.name)


class Sequence(object):

    def __init__(self):
        self.session = None
        self.sequence = None
        self.path = None

    def __repr__(self):
        return "session = {}, sequence = {}, path = {}".format(self.session, self.sequence, self.path)

    def __eq__(self, other):
        return (isinstance(other, type(self))
                and (self.session, self.sequence, self.path) == (other.session, other.sequence, self.path))


class Pattern(object):

    def __init__(self, pattern, garbage):
        self.pattern = pattern
        self.garbage = garbage

    def __repr__(self):
        return "pattern = {}, garbage = {}".format(self.pattern, self.garbage)

    def isFound(self, value):
        results = False
        for pattern in self.pattern:
            if pattern in value:
                results = True
        if self.garbage is not None:
            for garbage in self.garbage:
                if (garbage in value):
                    results = False
        return results


class Unftoad(object):

    __initialPrefixs = OrderedDict([('anat', "Anatomical (T1--MPRAGE)"),
                                    ('dwi', "Diffusion weighted image (DWI - DTI)"),
                                    ('b0_ap', "B0 AP (anterior -> posterior)"),
                                    ('b0_pa', "B0 PA (posterior -> anterior)")])

    __fieldmap = OrderedDict([('mag', "Magnitude fieldmap"),
                               ('phase', "Phase fieldmap")])


    __patterns = OrderedDict([('anat', Pattern(["MPRAGE"], None)),
                                    ('dwi', Pattern(["DWI", "DTI", "ep2d_diff"], ["_ADC", "_TRACEW", "_FA", "_TENSOR"])),
                                    ('b0_ap', Pattern(["_AP"], None)),
                                    ('b0_pa', Pattern(["_PA"], None)),
                                    ('mag',   Pattern(["gre_field_map"], None)),
                                    ('phase', Pattern(["gre_field_map"], None))])


    def __init__(self):

        self.__arguments = None
        self.__sessions = []
        self.__prefixs = OrderedDict()
        self.__sequences = OrderedDict()


    def __parseArguments(self):
        """Prepare and parse user friendly command line arguments for sys.argv.

        Returns:
            a args stucture containing command lines arguments
        """
        parser = arguments.Parser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                         description ="""\n

             """)
        parser.add_argument("sources", nargs='+', help="A list or a single UNF mri session. wilcard *, ? are accepted")
        parser.add_argument("-c", "--config", nargs='?', metavar=('filename'), required=False,
                                help="Specify the location of an alternative the config.cfg as input. Default: etc/config.cfg")
        parser.add_argument("-f","--fieldmap", help="Ask for fieldmap (magnitude and phase) during the conversion", action="store_true")
        parser.add_argument("-n","--noConfig", help="Do not produce a config.cfg file during conversion", action="store_true")
        parser.add_argument("-s","--noStride", help="Keep original stride orientation.", action="store_true")
        parser.add_argument("-d", "--dirName", nargs='?', metavar=('dirname'), required=False,
                            help="Specify a directory name for the destination. Default: toad_data")
        parser.add_argument("-m","--multipleDWI", metavar=('N'), type=int,
                            help="concatenate multiple dwi images from a same session. "
                                 "N is the number of dwi image to concatenate."
                                 "Only mrtrix .b encoding file will be produce", required=False)
        parser.add_argument('-v', '--version', action='version', version="%(prog)s ({})".format(__version__))

        args = parser.parse_args()
        return args


    #@TODO none unf options, reshuffle dicom
    def run(self):

        self.__validateToadDependencies()
        self.__arguments = self.__parseArguments()
        self.__extractPrefixsFromConfig()
        rootDirectories = self.__extractRootsDirectory(self.__arguments.sources)
        self.__initializeStructures(rootDirectories)
        while len(self.__sessions) > 0:

            outputDir = self.__arguments.dirName if self.__arguments.dirName else "toad_data"

            configXmlFile = os.path.join(outputDir, ".unftoad.xml")
            self.__initializeSelectedSessionsFromXmlDocument(configXmlFile)

            choosedSession = self.__sessions[0] if len(self.__sessions) == 1 \
                else self.__chooseFromSessions("Please choose a session to convert")

            sequences = self.__getSequencesBySession(choosedSession)
            originalSequences = self.__getSelectedSequences(sequences)
            if len(originalSequences) > 0:
                isPrefixHaveBeenChange = self.__isUserDefinedCustomPrefixs(originalSequences)
                prefixs = self.__defineCustomPrefixs(originalSequences) if isPrefixHaveBeenChange else self.__prefixs
                comparableSessions = self.__getComparableSessions(choosedSession)

                if len(comparableSessions) > 1:
                    message = "Warning: thoses subjects seem\'s to share exactly the same layout?:\n\n    {} "\
                        .format(",\n    ".join([session.name for session in comparableSessions]))
                    self.__printQuestion()
                    if not util.displayYesNoMessage(message, "\nConvert them all at the same time (y or n)? Default y :", "yes"):
                        comparableSessions=[choosedSession]

                subjectNames = self.__getSubjectNameForSessions(comparableSessions)

                for index, comparableSession in enumerate(comparableSessions):
                    name = subjectNames[index]
                    targetDir = os.path.join(os.getcwd(), outputDir, name)
                    if not os.path.exists(targetDir):
                        os.makedirs(targetDir)
                    
                    configFile = "{}/config.cfg".format(targetDir)
                    if not self.__arguments.noConfig:
                        self.__setPrefixInConfigFiles(prefixs, configFile)

                    for prefixFromOriginalSequence, sessionFromOriginalSequence in originalSequences.iteritems():
                        originalSequence = sessionFromOriginalSequence.sequence
                        for key, sequence in self.__getSequencesBySession(comparableSession).iteritems():
                            if sequence.sequence == originalSequence:
                                if prefixs.has_key(prefixFromOriginalSequence):
                                    prefixName = prefixs[prefixFromOriginalSequence]
                                else:
                                    prefixName = "{}_".format(prefixFromOriginalSequence)

                                if 'dwi' in prefixFromOriginalSequence:
                                    self.__convertDwi(sequence, name, prefixName, targetDir, configFile)

                                elif prefixFromOriginalSequence == 'mag':
                                    self.__convertMagnitude(sequence,
                                                            name,
                                                            prefixName,
                                                            targetDir,
                                                            configFile)
                                else:
                                    self.__convert(prefixFromOriginalSequence, sequence, name, prefixName, targetDir)


                    if self.__arguments.multipleDWI is not None:
                        cmd = "mrcat "
                        for index in range(0, self.__arguments.multipleDWI):
                            cmd += "{} ".format(glob.glob('{}/dwi{}_*.nii.gz'.format(targetDir, index)).pop())
                        cmd += " {}/{}{}.nii.gz".format(targetDir, self.__prefixs['dwi'], name)
                        print cmd
                        util.launchCommand(cmd)

                        cmd = "cat "
                        for index in range(0, self.__arguments.multipleDWI):
                            cmd += "{} ".format(glob.glob('{}/dwi{}_*.b'.format(targetDir, index)).pop())
                        cmd += " > {}/{}{}.b".format(targetDir, self.__prefixs['dwi'], name)
                        print cmd
                        util.launchCommand(cmd)

                        cmd = "rm {}/dwi?_*".format(targetDir)
                        print cmd
                        util.launchCommand(cmd)

                    self.__markSessionAsSelected(comparableSession)

                self.__parseConfigInXmlDocument(configXmlFile)

            if len(self.__sessions) == 1:
                break

        #cleanup temporary directories
        for (directory, archive) in rootDirectories:
            if archive is not None:
                shutil.rmtree(directory)

    def __getSesionsByName(self, name):
        for session in self.__sessions:
            if session.name == name:
                return session
        return False

    def __validateToadDependencies(self):
        """verify environments variables and lib importations for prior utilisation
            program will exit if those conditions are not meet

        """
        if (util.which("toadinfo") and util.which("mrconvert")) is None:
            print "toadinfo and/or mrconvert not found. Have you source unf-toad-config.sh?"
            sys.exit()


    def __extractRootsDirectory(self, sources):
        """ define directories who qualify for dicom extraction

        Args
            source: a list of  source directory as specified in command line

        Returns
            A list of tuples. Each tuple have 2 elements
                first element: the session directory
                second element: source archive name if the session is inside an archive, None otherwise
        """
        rootDirectories = []
        for source in sources:
            realSource = os.path.realpath(source)
            if os.path.isdir(realSource):
                rootDirectories.append((realSource, None))
            else:
                try:
                    print "Unarchiving {} file, This may take a while...".format(os.path.basename(realSource))
                    tmpDirectory = tempfile.mkdtemp()
                    tar = tarfile.open(realSource, 'r')
                    tar.extractall(tmpDirectory)
                    tar.close()
                    tmpSessions = glob.glob("{}/*".format(tmpDirectory))
                    for tmpSession in tmpSessions:
                        if os.path.isdir(tmpSession):
                            rootDirectories.append((tmpSession, os.path.basename(realSource)))
                except tarfile.TarError:
                    print "Could not determine {} file type, Discarded".format(os.path.basename(realSource))
        return rootDirectories


    def __initializeStructures(self, directories):
        """Initialize session end sequences structures

        Args:
            directories: A list of tuples. first element is the session directory, second element is the source
                            archive name if the session is inside an archive, None otherwise

        """
        numberOfDicoms = 0
        for rootDirectory, origin in directories:
            dicoms = glob.glob("{}/*/*.dcm".format(rootDirectory))
            numberOfDicoms += len(dicoms)
            dicoms.extend(glob.glob("{}/*/*/*.dcm".format(rootDirectory)))
            dicoms = sorted(dicoms)

            if not dicoms:
                print "cannot find any dicom file"
                sys.exit()

            sequences = []
            for dicom in dicoms:
                sequence = Sequence()
                sequence.session = os.path.basename(rootDirectory)
                sequence.path = os.path.split(dicom)[0].replace(" ", "\ ")
                path = sequence.path.replace(rootDirectory, '')

                if path[0] == "/":
                    path = path[1:]
                sequence.sequence = path.split("/")[0]
                if not self.__sequences.has_key((sequence.session, sequence.sequence)):
                    self.__sequences[(sequence.session, sequence.sequence)] = sequence
                    sequences.append(sequence)
            session = Session(sequence.session, "".join([sequence.sequence for sequence in sequences]), False)
            if session not in self.__sessions:
                self.__sessions.append(session)
        print self.__sessions


    def __initializeSelectedSessionsFromXmlDocument(self, xmlDocument):
        """Update sessions from attribute comming from an xml document.

        Args:
            xmlDocument: A minidom Document

        """
        if os.path.isfile(xmlDocument):
            xmlDocument = minidom.parse(xmlDocument)
            xmlSessions = xmlDocument.getElementsByTagName("session")
            for xmlSession in xmlSessions:
                session = self.__getSesionsByName(xmlSession.firstChild.data)
                self.__markSessionAsSelected(session)


    def __parseConfigInXmlDocument(self, cacheFile):
        """Gathers already converted session and parse them into a config file

        Args:
            cacheFile: A xml file

        """
        if os.path.isfile(cacheFile):
            xmlDocument = minidom.parse(cacheFile)
        else:
            xmlDocument = minidom.Document()

        if len(xmlDocument.getElementsByTagName("sessions")) == 0:
            baseXml = xmlDocument.createElement("unftoad")
            xmlDocument.appendChild(baseXml)
            xmlVersions = xmlDocument.createElement('versions')
            xmlSessions = xmlDocument.createElement('sessions')
        else:
            xmlVersions = xmlDocument.getElementsByTagName('versions')[0]
            xmlSessions = xmlDocument.getElementsByTagName("sessions")[0]

        mrconvertVersion = util.launchCommand("mrconvert --version")[1].split()
        if len(mrconvertVersion) > 2:
            mrconvertVersion = mrconvertVersion[2]
            nodes = [node for node in xmlSessions.getElementsByTagName('versions') if node.getAttribute('name') == 'mrconvert']
            if len(nodes) == 0:
                xmlVersion = xmlDocument.createElement('version')
                xmlVersion.setAttribute("name", 'mrconvert')
                xmlVersionContain = xmlDocument.createTextNode(mrconvertVersion)
                xmlVersion.appendChild(xmlVersionContain)
                xmlVersions.appendChild(xmlVersion)
                xmlDocument.childNodes[0].appendChild(xmlVersions)

        for name in [session.name for session in self.__sessions if session.isConvert]:
            nodes = [node for node in xmlSessions.getElementsByTagName('session') if node.getAttribute('name') == name]
            if len(nodes) == 0:
                xmlSession = xmlDocument.createElement('session')
                xmlSession.setAttribute("name", name)
                xmlSessionContain = xmlDocument.createTextNode(name)
                xmlSession.appendChild(xmlSessionContain)
                xmlSessions.appendChild(xmlSession)

        xmlDocument.childNodes[0].appendChild(xmlSessions)
        with open(cacheFile,"w") as w:
            xmlDocument.writexml(w)


    def __markSessionAsSelected(self, aSession):
        """Utility function that mark a session as converted

        Args:
            aSessions: the specific session to mark as selected

        """
        sessions= []
        for session in self.__sessions:
            if session == aSession:
                session.isConvert = True
            sessions.append(session)
        self.__sessions = sessions


    def __getSequencesBySession(self, session):
        """ retrieve into __sequences structures all sequences that are related
            to a specific session

        Args:
            session:  a session

        Returns:
            a keys ordered dictionnay containing sequences that belong to a specific session
        """
        sequences = OrderedDict()
        for index, value in self.__sequences.iteritems():
            if session.name == index[0]:
                sequences[index] = value
        return sequences


    def __getSelectedSequences(self, sequences):
        """Display a list of sequences to user so he could choose which sequences should be submit for conversion

        Args:
            sequences:  a list of sequence

        Returns:
            a dictionary containing sequences that user want to submit to conversion
        """
        selectedSequences={}
        for (prefix, value) in self.__initialPrefixs.iteritems():
            if (prefix not in 'dwi') or (self.__arguments.multipleDWI is None):
                sequence = self.__chooseFromSequences(sequences, prefix, "Please select the {} image\n".format(value))
                if sequence:
                    selectedSequences[prefix] = sequence
            else:
                for index in range(0, self.__arguments.multipleDWI):
                    sequence = self.__chooseFromSequences(sequences, "{}{}".format(prefix,index), "Please select the {} {} image\n".format(index+1, value))
                    selectedSequences["{}{}".format(prefix,index)] = sequence
        return selectedSequences


    def __getSubjectNameForSessions(self, sessions):
        """Ask user to define a new name for each sessions submit for conversion

        Args:
            sessions: a list a session to rename

        """
        subjectNames = []
        for session in sessions:
            self.__printQuestion()
            answer = raw_input("Please enter a subject name for {0}? Defaults {0} :".format(session.name))
            subjectNames.append(answer if answer.strip(" ") != "" else session.name)
        return subjectNames


    def __isUserDefinedCustomPrefixs(self, sequences):
        """ Utility function that ask users if they want to change images prefix

        Args:
            sequences: a dictionnary that contain sequences

        Returns:
            True if a user what to alter default image prefix name, False otherwise

        """
        self.__printQuestion("Whould you like to change default prefix at the beginning of the filename? Actual are ...\n\n")
        message = ""

        if self.__arguments.multipleDWI is not None:
            message+= "\t{} will be prefix: {} \n".format(self.__initialPrefixs['dwi'], self.__prefixs['dwi'])

        for index, value in self.__prefixs.iteritems():
            if sequences.has_key(index):
                        message+= "\t{} will be prefix: {} \n".format(self.__initialPrefixs[index], value)

        return util.displayYesNoMessage(message, "Change prefix (y or n)? Default n :", "no")


    def __defineCustomPrefixs(self, sequences):
        """Ask user to enter a new prefix name for each prefix define in __prefixs structure

        Args:
            sequences: a dictionnary that contain sequences

        Returns:
            An dictionnary ordered by prefix name as key and contains a new prefixs name to apply as value

        """
        prefixs = OrderedDict()
        for index, value in self.__prefixs.iteritems():
            if sequences.has_key(index):
                self.__printQuestion()
                message = "Enter new prefix for {} image. Default {} :".format(self.__initialPrefixs[index], value)
                input = raw_input(message)
                if input.strip(" ") != "" and not input.strip(" ").endswith('_'):
                    prefixs[index]="{}_".format(input)

        if self.__arguments.multipleDWI is not None:
            self.__printQuestion()
            message = "Enter new prefix for dwi image. Default {} :".format(self.__initialPrefixs['dwi'])
            input = raw_input(message)
            if input.strip(" ") != "" and not input.strip(" ").endswith('_'):
                prefixs['dwi']="{}_".format(input)

        return prefixs


    def __extractPrefixsFromConfig(self):
        """Extract most defaults prefixs value from various config files.
        """
        if self.__arguments.fieldmap:
            self.__initialPrefixs.update(self.__fieldmap)

        config = ConfigParser.ConfigParser()
        configFiles = []
        configFiles.append(os.path.dirname(os.path.realpath(__file__)).replace("bin", "etc/config.cfg"))
        if self.__arguments.config:
            if os.path.isfile(self.__arguments.config):
                configFiles.append(self.__arguments.config)

        for configFile in configFiles:
            config.read(configFile)
        for (prefix, value) in self.__initialPrefixs.iteritems():
            self.__prefixs[prefix] = config.get('prefix', prefix)


    def __printQuestion(self, question=None):
        """Print user friendly message into prompts

        Args:
            question: a string to print into the command prompt
        """
        os.system("clear")
        print("\n\n"+45*"-")
        if question is not None:
            print question


    def __chooseFromSessions(self, question):
        """Ask user to choose a session from a list of session

        Args:
            question: a string to prompt in the interface

        Returns:
            the session selected by the user
        """
        while True:
            self.__printQuestion(question)
            print(" 0.  None or exit")
            for index, session in enumerate(self.__sessions):
                if session.isConvert:
                    print("{:2d}.  {} *".format(index+1, session.name))
                else:
                    print("{:2d}.  {}".format(index+1, session.name))

            choice = raw_input("Enter your choice [0-"+str(len(self.__sessions))+"]: Default None [0] :")
            if choice.strip(" ") == "":
                choice = 0
            if int(choice) == 0 or 0 <= int(choice)-1 <= len(self.__sessions)-1:
                break
            else:
                print("Invalid choice, please enter a valid number")
        if int(choice) != 0:
            return self.__sessions[int(choice)-1]
        else:
            sys.exit()


    def __chooseFromSequences(self, sequences, prefix, question):
        """Ask user to choose a sequences from a list of sequences

        Args:
            sequences: a dictionary that contain sequence
            prefix:    a prefix
            question: a string to prompt in the interface

        Returns:
            the sequence selected by the user
        """
        defaults = ("None", "0")
        while True:
            self.__printQuestion(question)
            print(" 0.   None")
            for index, sequence in sequences.iteritems():
                tokens = " "
                try:
                    if self.__patterns[prefix].isFound(sequence.sequence):
                        defaults = (sequence.sequence, sequences.keys().index(index)+1)
                        tokens = "X"
                except KeyError:
                    pass
                print "{:2d}.{}  {}".format(sequences.keys().index(index)+1,
                                               tokens,
                                               sequence.sequence)

            message = "Enter your choice [0-{}]: Default ({}) [{}] :".format(str(len(sequences)), defaults[0], defaults[1])
            choice = raw_input(message)
            if choice.strip(" ") == "":
                choice = defaults[1]
            try:
                if int(choice) == 0 or 0 <= int(choice)-1 <= len(sequences)-1:
                    break
            except ValueError:
                    pass
        return sequences.items()[int(choice) -1][1] if int(choice) != 0 else False


    def __getComparableSessions(self, aSession):
        """ determine which session into __sessions share the same comparable than the aSession

        Args:
            sSession: a session
        Return:
            a list of session that all share the same comparable
        """
        comparables = []
        for session in self.__sessions:
            if session.comparator == aSession.comparator:
                comparables.append(session)
        return comparables


    def __setDwiParametersInConfigFiles(self, configFile, dicomImage):
        """ write toad properties from a dwi image into a config file

        Args:
            configFile: a config file
            dicomImage: a dicom image

        """
        cmd = "toadinfo {} -c {}".format(dicomImage, configFile)
        if self.__arguments.fieldmap:
            cmd += " --fieldmap "
        print cmd
        util.launchCommand(cmd)


    def __setPrefixInConfigFiles(self, prefixs, configFile):
        """ write images prefix into a config file

        Args:
            configFile: a config file
            prefixs: a structure containing prefixs

        """
        config = ConfigParser.ConfigParser()
        config.read(configFile)
        if not config.has_section('prefix'):
            config.add_section('prefix')
        for (item, value) in prefixs.items():
            config.set('prefix', item, value)
        with open(configFile,'wb') as f:
            config.write(f)


    def __setMagnitudeFieldmapInConfigFiles(self, configFile, echo1, echo2):
        """ write magnitude image properties into a config file

        Args:
            configFile: a config file
            echo1: the echo time of the first magnitude map
            echo2: the echo time of the secong magnitude map

        """
        config = ConfigParser.ConfigParser()
        if os.path.exists(configFile):
            config.read(configFile)
        if not config.has_section("correction"):
            config.add_section('correction')
        config.set('correction', "echo_time_mag1", echo1)
        config.set('correction', "echo_time_mag2", echo2)
        with open(configFile,'w') as w:
            config.write(w)


    def __convert(self, type, sequence, subjectName, prefix, target):
        """ Convert a dicom images into nifti

        the name of the resulting image will be:
            prefix_subjectName.nii.gz

        Args:
            type: the type of image i.e. (dwi, anat, mag ...)
            sequence: the sequence to convert
            subjectName: the name of the subject
            prefix: the prefix of the image
            target: the name of the output directory

        """
        filename = "{}/{}{}".format(target, prefix, subjectName)
        cmd = "mrconvert {0} {1}.nii.gz -force ".format(sequence.path, filename)
        if not self.__arguments.noStride:
            cmd += " -stride 1,2,3 "

        if type == 'phase':
            cmd += " -datatype float32 "

        print cmd
        util.launchCommand(cmd)


    def __convertDwi(self, sequence, subjectName, prefix, target, configFile):
        """ Convert a dwi dicom images into nifti

        the name of the resulting image will be:
            prefix_subjectName.nii.gz

        Args:
            sequence: the sequence to convert
            subjectName: the name of the subject
            prefix: the prefix of the image
            target: the name of the output directory
            configFile: the name of the subject config file

        """
        filename = "{}/{}{}".format(target, prefix, subjectName)
        cmd = "mrconvert {0} {1}.nii.gz -force -export_grad_mrtrix {1}.b -export_grad_fsl {1}.bvecs {1}.bvals"\
            .format(sequence.path, filename)
        if not self.__arguments.noStride:
            cmd += " -stride 1,2,3,4 "
        print cmd
        util.launchCommand(cmd)

        if not self.__arguments.noConfig:
            dicoms = glob.glob("{}/*.dcm".format(sequence.path))
            if len(dicoms) > 0:
                self.__setDwiParametersInConfigFiles(configFile, dicoms.pop())


    def __convertMagnitude(self, sequence, subjectName, prefix, target, configFile):
        """ Convert a magnitude fieldmap dicom images into nifti

        the name of the resulting image will be:
            prefix_subjectName.nii.gz

        Args:
            sequence: the sequence to convert
            subjectName: the name of the subject
            prefix: the prefix of the image
            target: the name of the output directory
            configFile: the name of the subject config file

        """
        values = []
        for directory in glob.glob("{}/echo*".format(os.path.dirname(sequence.path))):
            values.append((os.path.basename(directory).strip('echo_'), directory))
        try:
            echo1 = float(values[0][0])
            echo2 = float(values[1][0])

            if echo1 > echo2:
                source = values[0][1]
                if not self.__arguments.noConfig:
                    self.__setMagnitudeFieldmapInConfigFiles(configFile, echo2, echo1)
            else:
                source = values[1][1]
                if not self.__arguments.noConfig:
                    self.__setMagnitudeFieldmapInConfigFiles(configFile, echo1, echo2)

        except IndexError:
            return

        filename = "{}/{}{}".format(target, prefix, subjectName)
        cmd = "mrconvert {0} {1}.nii.gz -force ".format(source, filename)
        if not self.__arguments.noStride:
            cmd += " -stride 1,2,3 "
        print cmd
        util.launchCommand(cmd)


if __name__ == '__main__':
    toad = Unftoad()
    toad.run()

