#!/usr/bin/env python
# -*- coding: utf-8 -*-

import warnings
warnings.simplefilter('ignore')

from nibabel.nicom import dicomwrappers
import ConfigParser
import argparse
import math
import os

__author__ = "Mathieu Desrosiers"
__copyright__ = "Copyright 2014, The Toad Project"
__credits__ = ["Mathieu Desrosiers"]
__license__ = "GPL"
__version__ = "0.0"
__maintainer__ = "Mathieu Desrosiers"
__email__ = "mathieu.desrosiers@criugm.qc.ca"
__status__ = "Development"


def parseArguments():
    """Prepare and parse user friendly command line arguments for sys.argv.


    Returns:
        a args stucture containing command lines arguments
    """
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description ="""\n

         """)
    parser.add_argument("dcmFile", help="A SIEMENS DICOM imges")

    parser.add_argument("-c", "--config", nargs='?',metavar=('filename'), required=False,
                            help="Write output into a config.cfg file or create a new one if it doesn't exist")
    args = parser.parse_args()
    return args


def __getPhaseEncodingDirection(source):
    f = open(source, 'r')
    lines = f.readlines()
    f.close()
    for line in lines:
        if "sSliceArray.asSlice" in line and ".dInPlaneRot" in line:
            return __returnPhaseEncodingDirection(line)
        return 1


def __getPatFactor(source):
    f = open(source, 'r')
    lines = f.readlines()
    f.close()
    for line in lines:
        if "sPat.lAccelFactPE" in line:
            try:
                return float(line.split("=")[-1].strip())
            except ValueError:
                return 1
    return 1


def __getEpiFactor(source):
    f = open(source, 'r')
    lines = f.readlines()
    f.close()
    for line in lines:
        if "sKSpace.lPhaseEncodingLines" in line:
            try:
                return int(line.split("=")[-1].strip())
            except ValueError:
                return 1
    return 1

def __returnPhaseEncodingDirection(line):

    tolerance = 0.2

    try:
        value = float(line.split("=")[-1].strip())
    except ValueError:
        return 1

    if value < tolerance and value > -tolerance:
       return 1  #A>>P

    if (value > math.pi - tolerance) or (value < tolerance - math.pi):
        return 0  #P>>A

    if (value > (math.pi/2) - tolerance) and (value < (math.pi/2)+tolerance):
        return 2  #R>>L

    if (value < math.copysign((math.pi/2)-tolerance,-0.0)) and (value > math.copysign((math.pi/2)+tolerance, -0.0)):
         return 3  #L>>R

    return 1


def __getEchoSpacing(source, epiFactor, patFactor = 1):

    header=dicomwrappers.wrapper_from_file(source, force=True)

    try:
        bpppe = header.csa_header['tags']['BandwidthPerPixelPhaseEncode']['items'][0]
        echoSpacing = 1/(epiFactor*bpppe)*1000 *patFactor

    except AttributeError:
        print "Cannot read csa header from ", source
        return (None,None)

    except IndexError:
        print "Some field(s) cannot be found in the header"
        return (None,None)

    return echoSpacing


def writeConfig(source, phaseEncDir, epiFactor, echoSpacing):
    config = ConfigParser.ConfigParser()
    if os.path.exists(source):
        config.read(source)

    if not config.has_section("eddy"):
        config.add_section("eddy")

    if phaseEncDir is not None:
        config.set("eddy", "phase_enc_dir", phaseEncDir)
    if epiFactor is not None:
        config.set("eddy", "epi_factor", epiFactor)
    if echoSpacing is not None:
        config.set("eddy", "echo_spacing", echoSpacing)

    config.write(open(source,'w'))

if __name__ == '__main__':


    #parse arguments provide in command line
    arguments = parseArguments()

    #found information into the ASCCONV tags
    phaseEncDir = __getPhaseEncodingDirection(arguments.dcmFile)
    patFactor = __getPatFactor(arguments.dcmFile)
    epiFactor = __getEpiFactor(arguments.dcmFile)
    echoSpacing = __getEchoSpacing(arguments.dcmFile, epiFactor, patFactor)

    if arguments.config:
        writeConfig(arguments.config, phaseEncDir, epiFactor, echoSpacing)

    if phaseEncDir is not None:
        if phaseEncDir==0:
            print "\tPhase encoding: {}, P>>A".format(phaseEncDir)
        elif phaseEncDir==1:
            print "\tPhase encoding: {}, A>>P".format(phaseEncDir)
        elif phaseEncDir==2:
            print "\tPhase encoding: {}, R>>L".format(phaseEncDir)
        elif phaseEncDir==3:
            print "\tPhase encoding: {}, L>>R".format(phaseEncDir)
        else:
            print "Phase encoding:", phaseEncDir

    if epiFactor is not None:
        print "\tEPIFactor: ", epiFactor

    if echoSpacing is not None:
        print "\tEchoSpacing: ", echoSpacing, " ms"
