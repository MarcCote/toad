#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import sys
import os

sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), '..'))
from lib import arguments

__author__ = "Mathieu Desrosiers"
__copyright__ = "Copyright 2014, The Toad Project"
__credits__ = ["Mathieu Desrosiers"]
__license__ = "GPL"
__version__ = "0.1"
__maintainer__ = "Mathieu Desrosiers"
__email__ = "mathieu.desrosiers@criugm.qc.ca"
__status__ = "Development"


def parseArguments():
    """Prepare and parse user friendly command line arguments for sys.argv.


    Returns:
        a args stucture containing command lines arguments
    """
    parser = arguments.Parser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description ="""
        Delete an expression from a list of filename.
        This tool is usefull for tbss analysis where filenames are sensitive.\n

        ex: toadStripAffix _fa dwi_1_fa.nii.gz dwi_2_fa.nii.gz dwi_3_fa.nii.gz

        will produce:  dwi_1.nii.gz dwi_2.nii.gz dwi_3.nii.gz
         """)

    parser.add_argument('prefix', help="Specify an abbreviation")
    parser.add_argument("inputs", nargs='+', help="Specify the directories where we should find the files, wildcard * ? are accepted")
    parser.add_argument("-e", "--execute", help="Proceed to the operation", action="store_true")
    args = parser.parse_args()

    return args

if __name__ == '__main__':

    #parse arguments provide in command line
    arguments = parseArguments()

    results = []
    for file in arguments.inputs:
        directoryName,fileName = os.path.split(file)
        stripFileName=fileName.replace(arguments.prefix, "")
        print ">>{} will be rename {}".format(fileName, stripFileName)
        results.append((file, os.path.join(directoryName, stripFileName)))

    if arguments.execute:
        for source, target in results:
            os.rename(source, target)
    else:
        print "Specify -execute to process changes"