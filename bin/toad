#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import socket
import imp
import sys
import os

sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), '..'))
from core import subjectmanager, logger
from lib import util

__author__ = "Mathieu Desrosiers, Arnaud Bore and Christophe Bedetti"
__copyright__ = "Copyright 2014, The Toad Project"
__credits__ = ["Mathieu Desrosiers", "Arnaud Bore", "Christophe Bedetti", "Guillaume Vallet"]
__license__ = "GPL"
__version__ = "0.6"
__maintainer__ = "Mathieu Desrosiers"
__email__ = "mathieu.desrosiers@criugm.qc.ca"
__status__ = "Beta"


def __parseArguments():
    """Prepare and parse user friendly command line arguments for sys.argv.

    Returns:
        a args structure containing command lines arguments
    """
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description ="""\n
        Pipeline that realize your dream,
        Please consult the documentation at http://unf-montreal.ca/donotexistsyet
        for furthers informations""",
                                epilog= """\n

        An input must have the following structure

             |-input---\\
             |         |- t1_001.nii
             |         |- dwi_001.nii
             |         |- dwi_001.b ou (dwi_001.bvals et dwi_001.bvecs)
             |         |-(optionnal) aparc_aseg.nii
             |         |-(optionnal) freesurfer_anat.nii.gz
             |         |-(optionnal) lh_ribbon.nii.gz
             |         |-(optionnal) rh_ribbon.nii.gz
             |         |-(optionnal) brodmann.nii.gz
             |         |-(optionnal) b0ap_001.nii
             |         |-(optionnal) b0pa_001.nii
             |         |-(optionnal) mag_001.nii
             |         |-(optionnal) phase_001.nii
             |         |-(optionnal) config.cfg


        Then a subject completed will look like this
        sujN--\\
              |- 00-logs
              |- 01-backup
              |- 02-preparation
              |- 03-parcellation
              |- 04-eddy
              |- 04-fieldmap
              |- 05-denoising
              |- 06-preprocessing
              |- 07-registration
              |- 08-masking
              |- 09-dtifit
              |- 10-tensors
              |- 11-tensorsmetric
              |- 12-tensorstractography
              |- 13-hardi
              |- 14-hardimetric
              |- 15-harditractography
              |- 16-qa
              |- 17-results


        Please report bugs to mathieu.desrosiers@criugm.qc.ca
        Check whether it CROAK like a toad and WALK like a toad. It is not uncommon to find a warty skinned frog that isn\'t a toad.
        """)
    parser.add_argument("inputs", nargs='+', help="Specify the directories where we should find the subjects, wildcard * ? are accepted")
    parser.add_argument("-c", "--config", nargs='?',metavar=('filename'), required=False,
                            help="Specify the location of an alternative the config.cfg file")
    parser.add_argument("-s","--skipValidation", help="Skip the initial validation process (not recommended)",
                            action="store_true")
    parser.add_argument("-t", "--stopBeforeTask", nargs='?',metavar=('task name'), required=False,
                            help="Stop the pipeline at a specific task. TOAD will create the working directory."
                                 "Usefull if you want to introduce your own freesurfer tree into the pipeline. "
                                 "This command will apply to all subject.")
    parser.add_argument("-l","--local", help=("Do not use the Grid Engine during pipeline execution"), action="store_true")
    parser.add_argument("-p","--noPrompt", help=("Disable command prompt and always assume yes as answer"), action="store_true")
    parser.add_argument("-r","--reinitialize", help="reinitialize and cleanup the study at is initial stage", action="store_true")
    parser.add_argument("-v","--verbose", help="increase output verbosity (not implemented yet)", action="store_true")
    parser.add_argument("-e","--emergency", help=("Overwrite nb_threads parameter and deploy unlimited number of threads at each parallelizable steps. "
                        "If more than one subject is submit, this parameter will be ignored "
                        "(This parameter is dangerous and may crash the server or create deadlocks.)"
                        ), action="store_true")
    args = parser.parse_args()
    args.subject = None
    return args


def __manageEnvironnement(logger):
    """Set and verify environments variables and lib importations for prior utilisation

    Args:
        logger: the logger

    """
    try:
        version = float(sys.version[0:3])
        if version < 2.7:
            logger.warning("Note that toad had never run with a version of python < 2.7")
    except ValueError:
        logger.error("Cannot determine your version of python installed")

    packages = ['numpy', 'nibabel', 'dipy', 'matplotlib', 'vtk']
    for package in packages:
        try:
            imp.find_module(package)
        except ImportError:
            logger.error("Cannot find package {}.".format(package))

    hostname = socket.gethostname()
    if hostname in ['magma', 'stark']:

        #disable KMP_AFFINITY
        os.environ["KMP_AFFINITY"] = 'none'

        #setup variables for freesurfer
        os.environ["FREESURFER_HOME"] = "/usr/local/freesurfer"
        os.environ["FSFAST_HOME"]     = "/usr/local/freesurfer/fsfast"
        os.environ["SUBJECTS_DIR"] = "/usr/local/freesurfer/subjects"
        
        #setup variables for FSL
        os.environ["FSLDIR"] = "/usr/local/fsl"
        os.environ["FSLOUTPUTTYPE"] = "NIFTI_GZ"

        if "PERL5LIB" in os.environ:
            #setup perl library environnement
            os.environ["PERL5LIB"] = os.environ["PERL5LIB"] + ":/usr/local/freesurfer/mni/lib/perl5/5.8.5/"
        else:
            os.environ["PERL5LIB"] = "/usr/local/freesurfer/mni/lib/perl5/5.8.5/"

        #setup variable PATH
        os.environ["PATH"] = ("/usr/local/fsl/bin:/usr/local/matlab-8.0/bin:/usr/local/mrtrix3/bin:"
                              "/usr/local/mrtrix3/scripts:/usr/local/freesurfer/fsfast/bin:"
                              "/usr/local/freesurfer/mni/bin:/usr/local/freesurfer/bin:"
                              "/usr/local/freesurfer/tktools:/usr/local/c3d/bin:") + os.environ["PATH"]

        if hostname == 'stark':
            if "LD_LIBRARY_PATH" in os.environ:
                os.environ["LD_LIBRARY_PATH"] = "/usr/local/freesurfer/lib:"+os.environ["LD_LIBRARY_PATH"]
            else:
                os.environ["LD_LIBRARY_PATH"] = "/usr/local/freesurfer/lib"

        os.environ["MRTRIX_PYTHON_SCRIPTS"] = "/usr/local/mrtrix3/scripts"

    else:

        try:
            os.environ["FREESURFER_HOME"]
        except KeyError:
            logger.error("Please set the environment variable FREESURFER_HOME and source FreeSurferEnv.sh file")
            sys.exit()

        try:
            os.environ["FSLDIR"]
        except KeyError:
            logger.error("Please set the environment variable FSLDIR and source fslconf/fsl.sh file")
            sys.exit()

        mrtrix = util.which("transformcalc")
        if mrtrix is None:
            if util.which("tckgen") is None:
                logger.error("Mrtrix3 not found. Please install the package or set the environment variable $PATH correctly")
            else:
                logger.error("Your version of Mrtrix3 is too old, transformcalc could not be found. Please install the package again. ")
        else:
            os.environ["MRTRIX_PYTHON_SCRIPTS"]=os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(mrtrix))),"scripts")

        if util.which("matlab") is None:
            logger.error("Matlab not found. Please install matlab or set the environment variable $PATH correctly")
        else:
            cmd = "matlab -nodisplay -nodesktop -nojvm -nosplash -r \"if exist('spm')~=2,fprintf('SPM_NOT_FOUND');end;quit\""
            (executedCmd, output, error) = util.launchCommand(cmd)
            if "SPM_NOT_FOUND" in output:
                logger.error("Spm package not found, Please install spm or set the pathdef variable correctly")


    result = util.which("convert")
    if result is None:
        logger.error("ImageMagick not found. Please install the package or set the environment variable $PATH correctly")


if __name__ == '__main__':

    #create a logger
    logger = logger.Logger()

    #parse arguments provide in command line
    arguments = __parseArguments()

    #manage the environnement
    __manageEnvironnement(logger)

    #define toad directory
    realPath = os.path.realpath(__file__)
    arguments.toadDir = os.path.dirname(realPath).replace("bin", "")

    #Launch the manager
    result = subjectmanager.SubjectManager(arguments).run()
