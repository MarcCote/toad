#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import imp
import sys
import os

sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), '..'))
from core import subjectmanager, logger
from lib import util, arguments

__author__ = "Mathieu Desrosiers, Arnaud Bore and Christophe Bedetti"
__copyright__ = "Copyright 2014, The Toad Project"
__credits__ = ["Mathieu Desrosiers", "Arnaud Bore", "Christophe Bedetti", "Guillaume Vallet"]
__license__ = "GPL"
__version__ = "0.9"
__maintainer__ = "Mathieu Desrosiers"
__email__ = "mathieu.desrosiers@criugm.qc.ca"
__status__ = "Beta"

__pythonPackages = ['numpy', 'scipy', 'nibabel', 'dipy', 'matplotlib', 'vtk']

def __parseArguments():
    """Prepare and parse user friendly command line arguments for sys.argv.

    Returns:
        a args structure containing command lines arguments
    """
    parser = arguments.Parser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description ="""\n
        Pipeline that realize your dream,
        Please consult the documentation at http://unf-montreal.ca/donotexistsyet
        for furthers informations""",
                                epilog= """\n

        An input must have the following structure

             |-input---\\
             |         |- t1_001.nii
             |         |- dwi_001.nii
             |         |- dwi_001.b ou (dwi_001.bvals et dwi_001.bvecs)
             |         |-(optionnal) aparc_aseg.nii
             |         |-(optionnal) freesurfer_anat.nii.gz
             |         |-(optionnal) lh_ribbon.nii.gz
             |         |-(optionnal) rh_ribbon.nii.gz
             |         |-(optionnal) brodmann.nii.gz
             |         |-(optionnal) b0ap_001.nii
             |         |-(optionnal) b0pa_001.nii
             |         |-(optionnal) mag_001.nii
             |         |-(optionnal) phase_001.nii
             |         |-(optionnal) config.cfg


        Then a subject completed will look like this
        sujN--\\
              |- 00-logs
              |- 01-backup
              |- 02-preparation
              |- 03-parcellation
              |- 04-eddy
              |- 04-fieldmap
              |- 05-denoising
              |- 06-preprocessing
              |- 07-registration
              |- 08-masking
              |- 09-dtifit
              |- 10-tensors
              |- 11-tensorsmetric
              |- 12-tensorstractography
              |- 13-hardi
              |- 14-hardimetric
              |- 15-harditractography
              |- 16-qa
              |- 17-results


        Please report bugs to mathieu.desrosiers@criugm.qc.ca
        Check whether it CROAK like a toad and WALK like a toad. It is not uncommon to find a warty skinned frog that isn\'t a toad.
        """)
    parser.add_argument("inputs", nargs='+', help="Specify the directories where we should find the subjects, wildcard * ? are accepted")
    parser.add_argument("-c", "--config", nargs='+',metavar=('filename'), required=False,
                            help="Specify the location of an alternative the config.cfg file")

    parser.add_argument("-s","--skipValidation", help="Skip the initial validation process (not recommended)",
                            action="store_true")
    parser.add_argument("-t", "--task", nargs='+',metavar=('task_file_name'), required=False,
                            help="Specify a custom task to be submit")

    parser.add_argument("-b", "--stopBeforeTask", nargs='?',metavar=('task_name'), required=False,
                            help="Stop the pipeline at a specific task. TOAD will create the working directory."
                                 "Usefull if you want to introduce your own freesurfer tree into the pipeline. "
                                 "This command will apply to all subject.")
    parser.add_argument("-p","--noPrompt", help=("Disable command prompt and always assume yes as answer"), action="store_true")
    parser.add_argument("-r","--reinitialize", help="reinitialize and cleanup the study at is initial stage", action="store_true")
    parser.add_argument("-v","--verbose", help="increase output verbosity (not implemented yet)", action="store_true")
    parser.add_argument("-e","--emergency", help=("Overwrite nb_threads parameter and deploy unlimited number of threads at each parallelizable steps. "
                        "If more than one subject is submit, this parameter will be ignored "
                        "(This parameter is dangerous and may crash the server or create deadlocks.)"
                        ), action="store_true")
    parser.add_argument("-l","--local", help=("Do not use the Grid Engine during pipeline execution"), action="store_true")
    parser.add_argument("-q", "--queue", nargs='?',metavar=('queue_name'), required=False,
                            help="Specify an alternative queue name to use for the grid engine")

    args = parser.parse_args()
    args.subject = None
    args.matlabIsAvailable = None
    args.isVTKAvailable = None

    return args


def __manageEnvironnement(logger, arguments):
    """Set and verify environments variables and lib importations for prior utilisation

    Args:
        logger: the logger
        arguments: an argument parser object

    """

    serverName = os.environ.get('TOADSERVER')
    if serverName is not None:
        arguments.matlabIsAvailable = False if "mammouth" in serverName else True
        arguments.isVTKAvailable = False if "magma" in serverName else True
        logger.info("Configuration for {} server found".format(os.environ.get('TOADSERVER')))

    else:
        try:
            version = float(sys.version[0:3])
            if version < 2.7:
                logger.warning("Note that toad had never run with a version of python < 2.7", pause=True)
        except ValueError:
            logger.error("Cannot determine your version of python installed")

        for package in __pythonPackages:
            try:
                imp.find_module(package)
                if 'vtk' in package:
                    arguments.isVTKAvailable = True
            except ImportError:
                if 'vtk' in package:
                    __pythonPackages.remove('vtk')
                    logger.warning("VTK not found, Please install vtk correctly", pause=True)
                    arguments.isVTKAvailable = False
                else:
                    logger.error("Cannot find package {}. Have you source unf-toad-config.sh?".format(package))

        try:
            os.environ["FREESURFER_HOME"]
        except KeyError:
            logger.error("Please set the environment variable FREESURFER_HOME and source FreeSurferEnv.sh file")

        try:
            os.environ["FSLDIR"]
        except KeyError:
            logger.error("Please set the environment variable FSLDIR and source fslconf/fsl.sh file")
            sys.exit()

        mrtrix = util.which("transformcalc")
        if mrtrix is None:
            if util.which("tckgen") is None:
                logger.error("Mrtrix3 not found. Please install the package or set the environment variable $PATH correctly")
            else:
                logger.error("Your version of Mrtrix3 is too old, transformcalc could not be found. Please install the package again. ")

        if util.which("matlab") is None:
            arguments.matlabIsAvailable = False
            logger.warning("Matlab not found. Please install matlab or set the environment variable $PATH correctly", pause=True)

        else:
            arguments.matlabIsAvailable = True

        result = util.which("convert")
        if result is None:
            logger.error("ImageMagick not found. Please install the package or set the environment variable $PATH correctly")

        result = util.which("qsub")
        if result is None:
            logger.warning("No grid engine found. Pipeline will run locally", pause=True)
            arguments.local = True

    return arguments


def __manageVersions(logger, arguments):

    logger.info("Computer identification: {}".format(" ".join(os.uname())))

    logger.info("Toad is running at version: {}".format(__version__))
    logger.info("Python is running at version: {}".format(sys.version[0:6]))

    cmd = "fast"
    command, output, results = util.launchCommand(cmd)
    version = [line.replace("Part of FSL", "") for line in results.splitlines() if "build" in line].pop()
    logger.info("FSL is running at version: {}".format(version))

    cmd = "cat  $FREESURFER_HOME/build-stamp.txt"
    command, version, errors = util.launchCommand(cmd)
    logger.info("Freesurfer is running at version: {}".format(version.strip()))

    cmd = "tckgen -version"
    command, results, errors = util.launchCommand(cmd)
    version = [line.replace("tckgen", "").strip("== ") for line in results.splitlines() if "tckgen" in line].pop()
    logger.info("Mrtrix is running at version: {}".format(version))

    if arguments.matlabIsAvailable:
        found = False
        cmd = "matlab -nodisplay -nodesktop -nojvm -nosplash -r \"quit\""
        command, results, errors = util.launchCommand(cmd)
        messages=results.splitlines()
        for index, token in enumerate(messages):
            if "< M A T L A B (R) >" in token:
                logger.info("Matlab is running at version: {}".format(messages[index+2].strip()))
                found = True
                break
        if not found:
            logger.warning("Cannot determine Matlab version")


    cmd = "convert -version"
    command, results, errors = util.launchCommand(cmd)
    version = [line for line in results.splitlines() if "Version:" in line].pop().split()
    logger.info("ImageMagick is running at version: {}".format(" ".join(version[2:6])))

    for package in __pythonPackages:
        if not "vtk" in package:
            module = __import__(package)
            logger.info("{} is at version: {}".format(package, module.__version__))
        elif arguments.isVTKAvailable:
            logger.info("{} is at version: {}".format(package, module.__version__))
           

if __name__ == '__main__':

    #create a logger
    logger = logger.Logger()

    #parse arguments provide in command line
    arguments = __parseArguments()

    #manage the environnement
    arguments = __manageEnvironnement(logger, arguments)

    #make sure to log versions before starting the pipeline
    __manageVersions(logger, arguments)

    #define toad directory
    realPath = os.path.realpath(__file__)
    arguments.toadDir = os.path.dirname(realPath).replace("bin", "")

    #Launch the manager
    result = subjectmanager.SubjectManager(arguments).run()
